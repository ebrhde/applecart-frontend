import {useRouter} from "next/router";
import {NextPage} from "next";
import {useAppDispatch, useAppSelector} from "../../../redux/hooks";
import {addToCart} from "../../../redux/cart/cartSlice";
import {UISlice} from "../../../redux/ui/uiSlice";
import {Breadcrumb, Card, Col, Pagination, Row, Button, ListGroup} from "react-bootstrap";
import styles from "../../../styles/CatalogView.module.scss";
import Link from "next/link";
import {cartSlice} from "../../../redux/cart/cartSlice";
import integerDivide from "../../../utils/integerDivide";
import React, {CSSProperties, useState, useEffect} from "react";
import axios from "axios";
import ProductSlider from "../../../components/product-slider/ProductSlider";
import ProductSliderMobile from "../../../components/product-slider/ProductSliderMobile";
import Head from "next/head";

interface Props {
    categories: {id: number, image: string, alias: string, title: string, description: string}[],
    product: {id: number, categoryAlias: string, alias: string, title: string, description: string, productMedia: string[],
        productParams: {title: string, value: string, unit: string}[], price: string, old_price: string}
}

const Product: NextPage<Props> = ({categories, product}) => {
    const [photos, setPhotos] = useState(product.productMedia);
    const [sliderPosition, setSliderPosition] = useState(0);
    const [slideStyle, setSlideStyle] = useState({
        transform: 'translateY(0rem)'
    });

    const [mobileSlideStyle, setMobileSlideStyle] = useState({
        transform: 'translateX(0rem)'
    });

    const router = useRouter();

    const alias = router.query.alias;

    const activeCategory = categories.find(el => el.alias === alias);

    const userId = useAppSelector((state) => state.user.id);

    const dispatch = useAppDispatch();
    const handleCartToggle: () => void = () => {
        dispatch(UISlice.actions.toggleCartShown());
    }

    const handlePrevArrowClick: () => void = () => {
        if(sliderPosition > 0) {
            setSliderPosition((prevState) => prevState - 1);
        }
    }

    const handleNextArrowClick: () => void = () => {
        const slides = document.querySelectorAll('.slide');
        if(sliderPosition < slides.length - 3) {
            setSliderPosition((prevState) => prevState + 1);
        }
    }

    const handleMobilePrevArrowClick: () => void = () => {
        if(sliderPosition > 0) {
            setSliderPosition((prevState) => prevState - 1);
        }
    }

    const handleMobileNextArrowClick: () => void = () => {
        const slides = document.querySelectorAll('.slide_mobile');
        if(sliderPosition < slides.length - 3) {
            setSliderPosition((prevState) => prevState + 1);
        }
    }

    const handleThumbClick: (url: string) => void = (url) => {
        const mainImage = document.querySelector('.main_image');
        mainImage.setAttribute('src', url);
    }

    useEffect(() => {
        const slides = document.querySelectorAll('.slide');

        let translateValue = sliderPosition * 9;
        let mobileTranslateValue = sliderPosition * 5.5;

        setSlideStyle({
            transform: 'translateY(-' + translateValue + 'rem)'
        });
        setMobileSlideStyle({
            transform: 'translateX(-' + mobileTranslateValue + 'rem)'
        });
    }, [sliderPosition]);

    return <>
        <Head>
            <title>Applecart eshop | Catalog ({product.title})</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
            <link href="https://fonts.googleapis.com/css2?family=Righteous&display=swap" rel="stylesheet"/>
        </Head>
        <section className={"section--page"}>
            <div className="page--container container">
                <Breadcrumb className={"custom-breadcrumb"}>
                    <Breadcrumb.Item><Link href={`/`}>Home</Link></Breadcrumb.Item>
                    <Breadcrumb.Item>
                        <Link href={`/catalog/${alias}`}>
                            <a>Catalog ({activeCategory.title})</a>
                        </Link>
                    </Breadcrumb.Item>
                    <Breadcrumb.Item active>{product.title}</Breadcrumb.Item>
                </Breadcrumb>
                <div className={styles.product}>
                    <h2 className={styles.product_title}>{product.title}</h2>
                    <Row className={styles.product_flexbox}>
                        <Col lg={3}>
                            <ProductSlider handleThumbClick={handleThumbClick} handlePrevArrowClick={handlePrevArrowClick} handleNextArrowClick={handleNextArrowClick} photos={photos} productTitle={product.title} slideStyle={slideStyle} />
                            <ProductSliderMobile handleThumbClick={handleThumbClick} handlePrevArrowClick={handleMobilePrevArrowClick} handleNextArrowClick={handleMobileNextArrowClick} photos={photos} productTitle={product.title} slideStyle={mobileSlideStyle} />
                        </Col>
                        <Col md={6} lg={5} className={styles.image_container}>
                            <img src={photos[0]} alt={`${product.title}-main-image`} className={styles.main_image + ' main_image'} />
                        </Col>
                        <Col md={6} lg={4}>
                            <h4>Price:</h4>
                            <div className={styles.price_holder}>
                                <h5 className={product.old_price ? styles.hot_price : ''}>
                                    {integerDivide(product.price)}$</h5>
                                {product.old_price &&
                                    <h5 className={styles.old_price}>{integerDivide(product.old_price)}$</h5>
                                }
                            </div>
                            <Button className={styles.cart_btn} variant={"success"} onClick={() => {
                                if(userId) dispatch(addToCart({...product, quantity: 1}))
                                else dispatch(cartSlice.actions.addItem({...product, quantity: 1}));
                                handleCartToggle();
                            }
                            }>
                                Add to cart
                            </Button>
                        </Col>
                    </Row>
                    <Row className={styles.product_info}>
                        <Col lg={6}>
                            <h5>Features of {product.title}</h5>
                            <ListGroup className={styles.product_params}>
                                {product.productParams.map(el => (
                                    <ListGroup.Item>
                                        <b>{el.title}:</b> {el.value} {el.unit}
                                    </ListGroup.Item>
                                ))}
                            </ListGroup>
                        </Col>
                        <Col lg={6}>
                            <h5>Description of {product.title}</h5>
                            <div>{product.description}</div>
                        </Col>
                    </Row>
                </div>
            </div>
        </section>
    </>
}

export async function getServerSideProps({query}) {
    const alias = query.alias;
    const palias  = query.palias;

    return axios.get(process.env.NEXT_PUBLIC_API_ROOT + `/catalog/${alias}/${palias}`)
        .then((res => {
            const categories = res.data.data.categories;
            const product = res.data.data.product;

            return {
                props: {
                    categories,
                    product
                },
            }
        }))
        .catch((error) => {
            if(error.response.status === 404) {
                return {
                    notFound: true,
                }
            }
        });
}

export default Product;

// (
//
//     <Card className={styles.thumb}>
//         <img src={el} alt={`${product.title}-image-${index}`} />
//     </Card>
// )